#!/usr/bin/env python3
"""
Script ƒë·ªÉ ƒëi·ªÅu tra v·∫•n ƒë·ªÅ label mapping v√† t√¨m c√°ch kh√¥i ph·ª•c
"""

import pickle
import os
import numpy as np
import pandas as pd

def investigate_label_issue():
    """ƒêi·ªÅu tra v·∫•n ƒë·ªÅ label mapping"""
    
    print("üîç ƒêI·ªÄU TRA V·∫§N ƒê·ªÄ LABEL MAPPING")
    print("="*80)
    
    # ƒê∆∞·ªùng d·∫´n cache
    cache_dir = "cache/training_results"
    
    # T√¨m file cache m·ªõi nh·∫•t
    cache_files = [f for f in os.listdir(cache_dir) if f.endswith('.pkl')]
    
    if not cache_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file cache n√†o")
        return
    
    # L·∫•y file cache m·ªõi nh·∫•t
    latest_cache = max(cache_files, key=lambda x: os.path.getmtime(os.path.join(cache_dir, x)))
    cache_path = os.path.join(cache_dir, latest_cache)
    
    print(f"üìÅ Cache file: {latest_cache}")
    print("="*80)
    
    try:
        # ƒê·ªçc cache file
        with open(cache_path, 'rb') as f:
            cache_data = pickle.load(f)
        
        # Ph√¢n t√≠ch v·∫•n ƒë·ªÅ
        print("üîç PH√ÇN T√çCH V·∫§N ƒê·ªÄ:")
        
        # 1. Ki·ªÉm tra step1_data
        print("\n1Ô∏è‚É£ KI·ªÇM TRA STEP1_DATA:")
        if 'step1_data' in cache_data:
            step1 = cache_data['step1_data']
            print(f"   - Keys: {list(step1.keys())}")
            
            # Ki·ªÉm tra uploaded_file
            if 'uploaded_file' in step1:
                print(f"   ‚úÖ C√≥ uploaded_file")
            else:
                print(f"   ‚ùå THI·∫æU uploaded_file ‚Üí cache key hi·ªÉn th·ªã 'unknown_dataset'")
            
            # Ki·ªÉm tra selected_categories
            if 'selected_categories' in step1:
                print(f"   ‚úÖ C√≥ selected_categories: {step1['selected_categories']}")
            else:
                print(f"   ‚ùå THI·∫æU selected_categories ‚Üí cache key hi·ªÉn th·ªã 'no_cats'")
            
            # Ki·ªÉm tra dataframe
            if 'dataframe' in step1 and step1['dataframe'] is not None:
                df = step1['dataframe']
                print(f"   ‚úÖ C√≥ dataframe g·ªëc")
                print(f"   - Shape: {df.shape}")
                print(f"   - Columns: {list(df.columns)}")
                
                # T√¨m c·ªôt label
                label_col = None
                for col in ['label', 'category', 'class', 'target', 'y']:
                    if col in df.columns:
                        label_col = col
                        break
                
                if label_col:
                    print(f"   - Label column: {label_col}")
                    
                    # L·∫•y labels g·ªëc t·ª´ dataframe
                    original_labels = df[label_col].unique()
                    print(f"   - Labels g·ªëc t·ª´ dataframe: {original_labels}")
                    
                    # Ki·ªÉm tra xem labels c√≥ ph·∫£i l√† s·ªë kh√¥ng
                    numeric_labels = [str(v) for v in original_labels if str(v).isdigit()]
                    if len(numeric_labels) == len(original_labels):
                        print(f"   ‚ö†Ô∏è  Labels g·ªëc ƒë√£ l√† s·ªë ‚Üí c√≥ th·ªÉ ƒë√£ b·ªã encode tr∆∞·ªõc ƒë√≥")
                    else:
                        print(f"   ‚úÖ Labels g·ªëc c√≥ √Ω nghƒ©a ‚Üí c√≥ th·ªÉ kh√¥i ph·ª•c")
                else:
                    print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt label")
            else:
                print(f"   ‚ùå Kh√¥ng c√≥ dataframe")
        else:
            print(f"   ‚ùå Kh√¥ng c√≥ step1_data")
        
        # 2. Ki·ªÉm tra label_mapping hi·ªán t·∫°i
        print("\n2Ô∏è‚É£ KI·ªÇM TRA LABEL_MAPPING HI·ªÜN T·∫†I:")
        if 'label_mapping' in cache_data:
            current_mapping = cache_data['label_mapping']
            print(f"   - Label mapping: {current_mapping}")
            print(f"   - Type: {type(current_mapping)}")
            
            # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng mapping
            if isinstance(current_mapping, dict):
                numeric_keys = [k for k in current_mapping.keys() if isinstance(k, (int, np.integer))]
                meaningful_values = [v for v in current_mapping.values() if not str(v).isdigit()]
                
                print(f"   - Keys s·ªë: {len(numeric_keys)} - {numeric_keys}")
                print(f"   - Values c√≥ nghƒ©a: {len(meaningful_values)} - {meaningful_values}")
                
                if len(meaningful_values) == 0:
                    print(f"   ‚ùå V·∫§N ƒê·ªÄ: T·∫•t c·∫£ values ƒë·ªÅu l√† s·ªë ‚Üí c·∫ßn kh√¥i ph·ª•c labels g·ªëc")
                else:
                    print(f"   ‚úÖ Labels c√≥ √Ω nghƒ©a")
        else:
            print(f"   ‚ùå Kh√¥ng c√≥ label_mapping")
        
        # 3. Ki·ªÉm tra comprehensive_results
        print("\n3Ô∏è‚É£ KI·ªÇM TRA COMPREHENSIVE_RESULTS:")
        if 'comprehensive_results' in cache_data:
            comp_results = cache_data['comprehensive_results']
            print(f"   - S·ªë l∆∞·ª£ng k·∫øt qu·∫£: {len(comp_results)}")
            
            if comp_results:
                first_result = comp_results[0]
                print(f"   - Keys trong k·∫øt qu·∫£ ƒë·∫ßu ti√™n: {list(first_result.keys())}")
                
                # Ki·ªÉm tra label_mapping trong k·∫øt qu·∫£
                if 'label_mapping' in first_result:
                    result_mapping = first_result['label_mapping']
                    print(f"   - Label mapping trong k·∫øt qu·∫£: {result_mapping}")
                else:
                    print(f"   ‚ùå Kh√¥ng c√≥ label_mapping trong k·∫øt qu·∫£")
                
                # Ki·ªÉm tra predictions v√† true_labels
                if 'predictions' in first_result and 'true_labels' in first_result:
                    predictions = first_result['predictions']
                    true_labels = first_result['true_labels']
                    print(f"   ‚úÖ C√≥ predictions v√† true_labels")
                    print(f"   - Predictions type: {type(predictions)}, length: {len(predictions) if hasattr(predictions, '__len__') else 'N/A'}")
                    print(f"   - True labels type: {type(true_labels)}, length: {len(true_labels) if hasattr(true_labels, '__len__') else 'N/A'}")
                    
                    if hasattr(true_labels, '__len__') and len(true_labels) > 0:
                        unique_true = set(true_labels)
                        unique_pred = set(predictions)
                        print(f"   - Unique true_labels: {sorted(unique_true)}")
                        print(f"   - Unique predictions: {sorted(unique_pred)}")
                else:
                    print(f"   ‚ùå Thi·∫øu predictions ho·∫∑c true_labels")
        else:
            print(f"   ‚ùå Kh√¥ng c√≥ comprehensive_results")
        
        # 4. Ph√¢n t√≠ch nguy√™n nh√¢n
        print("\n4Ô∏è‚É£ PH√ÇN T√çCH NGUY√äN NH√ÇN:")
        
        # Ki·ªÉm tra cache key
        cache_key = cache_data.get('cache_key', '')
        print(f"   - Cache key: {cache_key}")
        
        if 'unknown_dataset' in cache_key:
            print(f"   ‚ùå NGUY√äN NH√ÇN 1: step1_data thi·∫øu 'uploaded_file'")
            print(f"      ‚Üí Kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√™n dataset")
        
        if 'no_cats' in cache_key:
            print(f"   ‚ùå NGUY√äN NH√ÇN 2: step1_data thi·∫øu 'selected_categories'")
            print(f"      ‚Üí Kh√¥ng th·ªÉ t·∫°o label mapping g·ªëc")
        
        # 5. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
        print("\n5Ô∏è‚É£ ƒê·ªÄ XU·∫§T GI·∫¢I PH√ÅP:")
        
        if 'step1_data' in cache_data:
            step1 = cache_data['step1_data']
            
            if 'dataframe' in step1 and step1['dataframe'] is not None:
                df = step1['dataframe']
                print(f"   ‚úÖ GI·∫¢I PH√ÅP 1: Kh√¥i ph·ª•c labels t·ª´ dataframe g·ªëc")
                print(f"      - DataFrame c√≥ s·∫µn trong cache")
                print(f"      - C√≥ th·ªÉ t√¨m c·ªôt label v√† t·∫°o mapping g·ªëc")
                
                # T√¨m c·ªôt label
                label_col = None
                for col in ['label', 'category', 'class', 'target', 'y']:
                    if col in df.columns:
                        label_col = col
                        break
                
                if label_col:
                    original_labels = df[label_col].unique()
                    print(f"      - T√¨m th·∫•y c·ªôt label: {label_col}")
                    print(f"      - Labels g·ªëc: {original_labels}")
                    
                    # T·∫°o mapping g·ªëc
                    original_mapping = {i: label for i, label in enumerate(sorted(original_labels))}
                    print(f"      - Mapping g·ªëc: {original_mapping}")
                    
                    print(f"   ‚úÖ C√ì TH·ªÇ KH√îI PH·ª§C!")
                else:
                    print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt label trong dataframe")
            
            elif 'file_path' in step1:
                file_path = step1['file_path']
                print(f"   ‚úÖ GI·∫¢I PH√ÅP 2: ƒê·ªçc l·∫°i file g·ªëc")
                print(f"      - File path: {file_path}")
                print(f"      - C√≥ th·ªÉ ƒë·ªçc file v√† t·∫°o mapping g·ªëc")
                
                if os.path.exists(file_path):
                    print(f"      - File t·ªìn t·∫°i")
                    print(f"   ‚úÖ C√ì TH·ªÇ KH√îI PH·ª§C!")
                else:
                    print(f"      - File kh√¥ng t·ªìn t·∫°i")
                    print(f"   ‚ùå KH√îNG TH·ªÇ KH√îI PH·ª§C!")
            else:
                print(f"   ‚ùå KH√îNG C√ì GI·∫¢I PH√ÅP: Kh√¥ng c√≥ dataframe ho·∫∑c file_path")
        else:
            print(f"   ‚ùå KH√îNG C√ì GI·∫¢I PH√ÅP: Kh√¥ng c√≥ step1_data")
        
        print("\n" + "="*80)
        print("üìã T√ìM T·∫ÆT V·∫§N ƒê·ªÄ:")
        print("   ‚Ä¢ Cache key hi·ªÉn th·ªã 'unknown_dataset' v√† 'no_cats'")
        print("   ‚Ä¢ step1_data thi·∫øu 'uploaded_file' v√† 'selected_categories'")
        print("   ‚Ä¢ LabelEncoder chuy·ªÉn ƒë·ªïi labels th√†nh s·ªë nh∆∞ng kh√¥ng l∆∞u mapping g·ªëc")
        print("   ‚Ä¢ Labels trong cache l√† s·ªë (0, 1) thay v√¨ labels c√≥ nghƒ©a")
        print("   ‚Ä¢ C·∫ßn kh√¥i ph·ª•c labels g·ªëc t·ª´ dataset ƒë·ªÉ t·∫°o confusion matrix ƒë√∫ng")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒëi·ªÅu tra: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    investigate_label_issue()
