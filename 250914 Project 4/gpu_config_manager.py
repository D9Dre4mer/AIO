#!/usr/bin/env python3
"""
GPU Configuration Manager
Qu·∫£n l√Ω c·∫•u h√¨nh GPU optimization cho Topic Modeling Auto Classifier
"""

import os
import sys
from pathlib import Path

def update_config(enable_gpu=False, force_dense=False):
    """C·∫≠p nh·∫≠t c·∫•u h√¨nh GPU trong config.py"""
    
    config_path = Path("config.py")
    if not config_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y file config.py")
        return False
    
    # ƒê·ªçc file config hi·ªán t·∫°i
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # C·∫≠p nh·∫≠t c√°c gi√° tr·ªã
    content = content.replace(
        f"ENABLE_GPU_OPTIMIZATION = {not enable_gpu}", 
        f"ENABLE_GPU_OPTIMIZATION = {enable_gpu}"
    )
    content = content.replace(
        f"FORCE_DENSE_CONVERSION = {not force_dense}", 
        f"FORCE_DENSE_CONVERSION = {force_dense}"
    )
    
    # Ghi l·∫°i file
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:")
    print(f"   ‚Ä¢ ENABLE_GPU_OPTIMIZATION = {enable_gpu}")
    print(f"   ‚Ä¢ FORCE_DENSE_CONVERSION = {force_dense}")
    
    return True

def show_current_config():
    """Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i"""
    try:
        from config import ENABLE_GPU_OPTIMIZATION, FORCE_DENSE_CONVERSION
        
        print("üîß C·∫•u h√¨nh GPU hi·ªán t·∫°i:")
        print(f"   ‚Ä¢ ENABLE_GPU_OPTIMIZATION = {ENABLE_GPU_OPTIMIZATION}")
        print(f"   ‚Ä¢ FORCE_DENSE_CONVERSION = {FORCE_DENSE_CONVERSION}")
        
        if ENABLE_GPU_OPTIMIZATION or FORCE_DENSE_CONVERSION:
            print("\nüöÄ Ch·∫ø ƒë·ªô: GPU OPTIMIZATION")
            print("   ‚Ä¢ S·ª≠ d·ª•ng dense matrices")
            print("   ‚Ä¢ K√≠ch ho·∫°t GPU acceleration")
            print("   ‚Ä¢ T·ªën nhi·ªÅu memory h∆°n")
        else:
            print("\nüíæ Ch·∫ø ƒë·ªô: MEMORY OPTIMIZATION")
            print("   ‚Ä¢ S·ª≠ d·ª•ng sparse matrices")
            print("   ‚Ä¢ T·∫Øt GPU acceleration")
            print("   ‚Ä¢ Ti·∫øt ki·ªám memory")
            
    except ImportError as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc c·∫•u h√¨nh: {e}")

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print("üîß GPU Configuration Manager")
        print("\nC√°ch s·ª≠ d·ª•ng:")
        print("  python gpu_config_manager.py show          # Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i")
        print("  python gpu_config_manager.py gpu           # B·∫≠t GPU optimization")
        print("  python gpu_config_manager.py memory        # B·∫≠t memory optimization")
        print("  python gpu_config_manager.py dense         # B·∫≠t dense conversion")
        print("  python gpu_config_manager.py sparse        # T·∫Øt dense conversion")
        return
    
    command = sys.argv[1].lower()
    
    if command == "show":
        show_current_config()
        
    elif command == "gpu":
        update_config(enable_gpu=True, force_dense=False)
        print("\nüöÄ ƒê√£ b·∫≠t GPU optimization!")
        print("   ‚Ä¢ Models s·∫Ω s·ª≠ d·ª•ng GPU acceleration")
        print("   ‚Ä¢ BoW v√† TF-IDF s·∫Ω chuy·ªÉn sang dense matrices")
        
    elif command == "memory":
        update_config(enable_gpu=False, force_dense=False)
        print("\nüíæ ƒê√£ b·∫≠t Memory optimization!")
        print("   ‚Ä¢ Models s·∫Ω s·ª≠ d·ª•ng CPU v·ªõi sparse matrices")
        print("   ‚Ä¢ Ti·∫øt ki·ªám memory ƒë√°ng k·ªÉ")
        print("   ‚Ä¢ Ph√π h·ª£p cho dataset l·ªõn")
        
    elif command == "dense":
        update_config(enable_gpu=False, force_dense=True)
        print("\nüîÑ ƒê√£ b·∫≠t Dense conversion!")
        print("   ‚Ä¢ BoW v√† TF-IDF s·∫Ω chuy·ªÉn sang dense matrices")
        print("   ‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng GPU acceleration")
        print("   ‚Ä¢ T·ªën memory nh∆∞ng c√≥ th·ªÉ nhanh h∆°n cho m·ªôt s·ªë models")
        
    elif command == "sparse":
        update_config(enable_gpu=False, force_dense=False)
        print("\nüìä ƒê√£ t·∫Øt Dense conversion!")
        print("   ‚Ä¢ BoW v√† TF-IDF s·∫Ω gi·ªØ sparse matrices")
        print("   ‚Ä¢ Ti·∫øt ki·ªám memory t·ªëi ƒëa")
        print("   ‚Ä¢ Ph√π h·ª£p cho dataset r·∫•t l·ªõn")
        
    else:
        print(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {command}")
        print("S·ª≠ d·ª•ng: python gpu_config_manager.py show")

if __name__ == "__main__":
    main()
